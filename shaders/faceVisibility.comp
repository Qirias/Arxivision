/* #version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct InstanceData {
    vec4 translation; // w component is the material type
    vec4 color;
    uint visibilityMask;
};

layout(std430, binding = 0) readonly buffer InstanceBuffer {
    InstanceData instances[];
};

layout(std430, binding = 1) buffer FaceVisibilityBuffer {
    uint faceVisibility[]; // One uint per instance (voxel), 6 bits used
};

layout(push_constant) uniform PushConstants {
    ivec3 worldDimensions;
};

bool isVoxelSolid(ivec3 pos) {
    if (any(lessThan(pos, ivec3(0))) || any(greaterThanEqual(pos, worldDimensions))) {
        return false;
    }
    
    return true;
}

void main() {
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(pos, worldDimensions))) return;

    int index = pos.x + pos.y * worldDimensions.x + pos.z * worldDimensions.x * worldDimensions.y;

    uint visibility = 0;
    ivec3 offsets[6] = {
        ivec3(1, 0, 0), // Positive X
        ivec3(-1, 0, 0), // Negative X
        ivec3(0, -1, 0), // Positive Y (down)
        ivec3(0, 1, 0), // Negative Y (up)
        ivec3(0, 0, 1), // Positive Z (back)
        ivec3(0, 0, -1) // Negative Z (front)
    };

    for (int i = 0; i < 6; i++) {
        if (!isVoxelSolid(pos + offsets[i])) {
            visibility &= ~(1u << i);
        }
    }

    faceVisibility[index] = visibility;
}

================================================================================================================
                                                    NOT IN USE
================================================================================================================

I will have to use this when I edit the terrain. The 3D voxel array contains voxels that are air.
The largeInstanceBuffer only contains solid voxels with their visibility. I will have to also edit a chunk from
the largeInstanceBuffer to add or delete a voxel. If that is slow I might initialize the whole terrain including
empty voxels.
*/
