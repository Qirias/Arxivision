#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, r32f) uniform writeonly image2D outImage;
layout(binding = 1) uniform sampler2D inImage;

layout(push_constant) uniform block
{
    vec2 imageSize;
};

void main()
{
    uvec2 pos = gl_GlobalInvocationID.xy;

    // Calculate normalized coordinates of the top-left corner of the current texel quad
    vec2 normalizedPos = (vec2(pos) + vec2(0.5)) / imageSize;

    // Sample multiple points within the texel quad
    float depth1 = texture(inImage, normalizedPos).x;
    float depth2 = texture(inImage, normalizedPos + vec2(1.0 / imageSize.x, 0)).x;
    float depth3 = texture(inImage, normalizedPos + vec2(0, 1.0 / imageSize.y)).x;
    float depth4 = texture(inImage, normalizedPos + vec2(1.0 / imageSize.x, 1.0 / imageSize.y)).x;

    // Manually compute the minimum depth value
    float minDepth = min(min(depth1, depth2), min(depth3, depth4));

    // Store the minimum depth to the output image
    imageStore(outImage, ivec2(pos), vec4(vec3(minDepth), 1.0f));
}
