#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, r32f) uniform writeonly image2D outImage;
layout(binding = 1) uniform sampler2D inImage;

layout(push_constant) uniform block {
    vec2 imageSize;
};

void main() {
    uvec2 pos = gl_GlobalInvocationID.xy;

    if (pos.x >= imageSize.x || pos.y >= imageSize.y)
        return;

    // Calculate normalized coordinates of the current pixel's center
    vec2 normalizedPos = (vec2(pos) + vec2(0.5)) / imageSize;

    float depths[9];
    int index = 0;
    for (int dy = -1; dy <= 1; dy++) {
        for (int dx = -1; dx <= 1; dx++) {
            vec2 offset = vec2(dx, dy) / imageSize;
            depths[index++] = texture(inImage, normalizedPos + offset).x;
        }
    }

    float maxDepth = depths[0];
    for (int i = 1; i < 9; i++) {
        maxDepth = max(maxDepth, depths[i]);
    }

    imageStore(outImage, ivec2(pos), vec4(maxDepth));
}
