// Based on https://github.com/DaveH355/clustered-shading

#version 450

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Cluster {
    vec4 minPoint;
    vec4 maxPoint;
    uint count;
    uint lightIndices[100];
};

struct Frustum {
    mat4 inverseProjection;
    uvec3 gridSize;
    uvec2 screenDimensions;
    float zNear;
    float zFar;
};

layout (binding = 0) restrict buffer ClusterBuffer {
    Cluster clusters[];
};

layout (binding = 1) uniform FrustumBuffer {
    Frustum frustum;
};

vec3 screenToView(vec2 screenCoord) {
    vec4 ndc = vec4(screenCoord / frustum.screenDimensions * 2.0 - 1.0, 1.0, 1.0);
    
    vec4 viewCoord = frustum.inverseProjection * ndc;
    viewCoord /= viewCoord.w;
    return viewCoord.xyz;
}

// Returns the intersection point of an infinite line and a
// plane perpendicular to the Z-axis
vec3 lineIntersectionWithZPlane(vec3 startPoint, vec3 endPoint, float zDistance) {
    vec3 direction = endPoint - startPoint;
    vec3 normal = vec3(0.0, 0.0, -1.0); // plane normal
    
    // skip check if the line is paralle to the plane
    
    float t = (zDistance - dot(normal, startPoint)) / dot(normal, direction);
    return startPoint + t * direction; // the parametric form of the line equation
}

void main() {
    uint tileIndex = gl_WorkGroupID.x + (gl_WorkGroupID.y * frustum.gridSize.x) +
                    (gl_WorkGroupID.z * frustum.gridSize.x * frustum.gridSize.y);
    vec2 tileSize = frustum.screenDimensions / frustum.gridSize.xy;
    
    // tile in screen-space
    vec2 minTile_screenspace = gl_WorkGroupID.xy * tileSize;
    vec2 maxTile_screenspace = (gl_WorkGroupID.xy + 1) * tileSize;

    // convert tile to view space sitting on the near plane
    vec3 minTile = screenToView(minTile_screenspace);
    vec3 maxTile = screenToView(maxTile_screenspace);
    
    float planeNear = frustum.zNear * pow(frustum.zFar / frustum.zNear, gl_WorkGroupID.z / float(frustum.gridSize.z));
    float planeFar = frustum.zNear * pow(frustum.zFar / frustum.zNear, (gl_WorkGroupID.z + 1) / float(frustum.gridSize.z));
    
    // the line goes from the eye position in view space (0, 0, 0)
    // through the min/max points of a tile to intersect with a given cluster's near-far planes
    vec3 minPointNear =
        lineIntersectionWithZPlane(vec3(0, 0, 0), minTile, planeNear);
    vec3 minPointFar =
        lineIntersectionWithZPlane(vec3(0, 0, 0), minTile, planeFar);
    vec3 maxPointNear =
        lineIntersectionWithZPlane(vec3(0, 0, 0), maxTile, planeNear);
    vec3 maxPointFar =
        lineIntersectionWithZPlane(vec3(0, 0, 0), maxTile, planeFar);

    clusters[tileIndex].minPoint = vec4(min(minPointNear, minPointFar), 0.0);
    clusters[tileIndex].maxPoint = vec4(max(maxPointNear, maxPointFar), 0.0);
}
